TESTS += test/test_monetaryunit
bin_PROGRAMS += test/test_monetaryunit
TEST_SRCDIR = test
TEST_BINARY=test/test_monetaryunit$(EXEEXT)

JSON_TEST_FILES = \
  test/data/script_valid.json \
  test/data/base58_keys_valid.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/script_invalid.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json

RAW_TEST_FILES = test/data/alertTests.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

MONETARYUNIT_TESTS =\
  test/alert_tests.cpp \
  test/allocator_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bloom_tests.cpp \
  test/checkblock_tests.cpp \
  test/Checkpoints_tests.cpp \
  test/compress_tests.cpp \
  test/DoS_tests.cpp \
  test/getarg_tests.cpp \
  test/hash_tests.cpp \
  test/key_tests.cpp \
  test/main_tests.cpp \
  test/miner_tests.cpp \
  test/mruset_tests.cpp \
  test/multisig_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/rpc_tests.cpp \
  test/script_P2SH_tests.cpp \
  test/script_tests.cpp \
  test/scriptnum_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/test_monetaryunit.cpp \
  test/transaction_tests.cpp \
  test/uint256_tests.cpp \
  test/util_tests.cpp

if ENABLE_WALLET
MONETARYUNIT_TESTS += \
  test/accounting_tests.cpp \
  test/wallet_tests.cpp \
  test/rpc_wallet_tests.cpp
endif

test_test_monetaryunit_SOURCES = $(MONETARYUNIT_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_monetaryunit_CPPFLAGS = $(MONETARYUNIT_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)
test_test_monetaryunit_LDADD = $(LIBMONETARYUNIT_SERVER) $(LIBMONETARYUNIT_CLI) $(LIBMONETARYUNIT_COMMON) $(LIBMONETARYUNIT_UTIL) $(LIBMONETARYUNIT_CRYPTO) $(LIBMONETARYUNIT_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \
  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)
if ENABLE_WALLET
test_test_monetaryunit_LDADD += $(LIBMONETARYUNIT_WALLET)
endif

test_test_monetaryunit_LDADD += $(LIBMONETARYUNIT_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
test_test_monetaryunit_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

nodist_test_test_monetaryunit_SOURCES = $(GENERATED_TEST_FILES)

$(MONETARYUNIT_TESTS): $(GENERATED_TEST_FILES)

CLEAN_MONETARYUNIT_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_MONETARYUNIT_TEST)

monetaryunit_test: $(TEST_BINARY)

monetaryunit_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

monetaryunit_test_clean : FORCE
	rm -f $(CLEAN_MONETARYUNIT_TEST) $(test_test_monetaryunit_OBJECTS) $(TEST_BINARY)

check-local:
	@echo "Running test/monetaryunit-util-test.py..."
	$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/monetaryunit-util-test.py

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
